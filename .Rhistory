pot$early.late[pot$relative.position<0]<-"early"
pot$early.late[pot$relative.position>0]<-"late"
#removing NAs
pot<-pot[!is.na(pot$early.late),]
flower.counts=read.csv("./Raw_data/flower_counts.csv") #read in flower count data
mert.flower.counts<-flower.counts[(flower.counts$plant=="Mertensia fusiformis"),] #limit flower counts to Mertensia data
mert.counts.by.site<-aggregate(x=mert.flower.counts$total_flowers,by=list(mert.flower.counts$date,mert.flower.counts$site,mert.flower.counts$plot),FUN="mean") #calculate mean flower counts by week and site
colnames(mert.counts.by.site)<-c("date","site","plot.treat","number.conspecifics")
#changing class to adjust names
mert.counts.by.site$site<-as.character(mert.counts.by.site$site)
mert.counts.by.site$plot.treat<-as.character(mert.counts.by.site$plot.treat)
#fixing names
mert.counts.by.site$site[mert.counts.by.site$site=="Avery Picnic"]<-"AveryPicnic"
mert.counts.by.site$site[mert.counts.by.site$site=="Stupid Falls"]<-"StupidFalls"
mert.counts.by.site$site[mert.counts.by.site$site=="Wash 3C"]<-"WG3C"
mert.counts.by.site <-mert.counts.by.site[!(mert.counts.by.site$plot.treat=="Kaysee"),]
mert.counts.by.site$plot.treat[mert.counts.by.site$plot.treat=="Control"]<-"control"
mert.counts.by.site$plot.treat[mert.counts.by.site$plot.treat=="Manipulated"]<-"manip"
#calculating week numbers in preparation for the merge
mert$week.estimate<-strftime(mert$midpoint, format = "%V")
mert.counts.by.site$week.estimate<-strftime(mert.counts.by.site$date, format = "%V")
mert<-merge(mert,mert.counts.by.site, by.x = c("site","plot.treat","week.estimate"), by.y = c("site","plot.treat","week.estimate")) #merging by site, plot treatment, and week estimate
delph.flower.counts<-flower.counts[(flower.counts$plant=="Delphinium nuttallianum"),] #limit flower counts to Delphinium data
delph.counts.by.site<-aggregate(x=delph.flower.counts$total_flowers,by=list(delph.flower.counts$date,delph.flower.counts$site,delph.flower.counts$plot),FUN="mean") #calculate mean flower counts by week and site
colnames(delph.counts.by.site)<-c("date","site","plot.treat","number.conspecifics")
#changing class to adjust names
delph.counts.by.site$site<-as.character(delph.counts.by.site$site)
delph.counts.by.site$plot.treat<-as.character(delph.counts.by.site$plot.treat)
#fixing names
delph.counts.by.site$site[delph.counts.by.site$site=="Rustlers Gulch"]<-"RustlersGulch"
delph.counts.by.site$site[delph.counts.by.site$site=="Wash 3C"]<-"WG3C"
delph.counts.by.site <-delph.counts.by.site[!(delph.counts.by.site$plot.treat=="Kaysee"),]
delph.counts.by.site$plot.treat[delph.counts.by.site$plot.treat=="Control"]<-"control"
delph.counts.by.site$plot.treat[delph.counts.by.site$plot.treat=="Manipulated"]<-"manip"
#calculating week numbers in preparation for the merge
delph$week.estimate<-strftime(delph$midpoint, format = "%V")
delph.counts.by.site$week.estimate<-strftime(delph.counts.by.site$date, format = "%V")
delph<-merge(delph,delph.counts.by.site, by.x = c("site","plot.treat","week.estimate"), by.y = c("site","plot.treat","week.estimate")) #merging by site, plot treatment, and week estimate
pot.flower.counts<-flower.counts[(flower.counts$plant=="Potentilla pulcherrima"),] #limit flower counts to Potentilla data
pot.counts.by.site<-aggregate(x=pot.flower.counts$total_flowers,by=list(pot.flower.counts$date,pot.flower.counts$site,pot.flower.counts$plot),FUN="mean") #calculate mean flower counts by week and site
colnames(pot.counts.by.site)<-c("date","site","plot.treat","number.conspecifics")
#changing class to adjust names
pot.counts.by.site$site<-as.character(pot.counts.by.site$site)
pot.counts.by.site$plot.treat<-as.character(pot.counts.by.site$plot.treat)
#fixing names
pot.counts.by.site$site[pot.counts.by.site$site=="Rustlers Gulch"]<-"RustlersGulch"
pot.counts.by.site$site[pot.counts.by.site$site=="Wash 3C"]<-"WG3C"
pot.counts.by.site$site[pot.counts.by.site$site=="Bellview Bench"]<-"BellviewBench"
pot.counts.by.site$site[pot.counts.by.site$site=="Avery Picnic"]<-"AveryPicnic"
pot.counts.by.site$site[pot.counts.by.site$site=="Stupid Falls"]<-"StupidFalls"
pot.counts.by.site <-pot.counts.by.site[!(pot.counts.by.site$plot.treat=="Kaysee"),]
pot.counts.by.site$plot.treat[pot.counts.by.site$plot.treat=="Control"]<-"control"
pot.counts.by.site$plot.treat[pot.counts.by.site$plot.treat=="Manipulated"]<-"manip"
#calculating week numbers in preparation for the merge
pot$week.estimate<-strftime(pot$midpoint, format = "%V")
pot.counts.by.site$week.estimate<-strftime(pot.counts.by.site$date, format = "%V")
pot<-merge(pot,pot.counts.by.site, by.x = c("site","plot.treat","week.estimate"), by.y = c("site","plot.treat","week.estimate")) #merging by site, plot treatment, and week estimate
mert.open<-mert[(mert$treat=="open"),] #removed hand pollination treatment
mert.nbinom<-fitdist(mert.open$dev.seed, "nbinom") #fitting Mertensia data to negative binomial distribution using fitdistplus
plot(mert.nbinom) #plotting to see the fit
#mert.glmmtmb<-glmmTMB(dev.seed ~ flowers:(deviation*early.late) + flowers:number.conspecifics/plot.treat  + (1|site), family = "nbinom2", data = mert.open) #putting count data into glmmTMB for DHARMa package
#summary(mert.glmmtmb) #summary of glmmTMB model
#mert.counts.simulation<-simulateResiduals(fittedModel = mert.glmmtmb) #creating simulation for Mertensia mixed effects model with DHARMa package
#plot(mert.counts.simulation) #plotting simulation
#testDispersion(mert.counts.simulation) #checking for overdispersion
#testZeroInflation(mert.counts.simulation) #checking for zero inflation
mert.glmmtmb<-glmmTMB(dev.seed ~ flowers:(deviation*early.late) + flowers:number.conspecifics/plot.treat  + (1|site), ziformula=~1, family = "nbinom2", data = mert.open) #putting count data into glmmTMB for DHARMa package
summary(mert.glmmtmb) #summary of glmmTMB model
mert.counts.simulation<-simulateResiduals(fittedModel = mert.glmmtmb) #creating simulation for Mertensia mixed effects model with DHARMa package
install.packages("DHARMa")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) #clearing environment
suppressWarnings(suppressPackageStartupMessages(require(knitr)))
suppressWarnings(suppressPackageStartupMessages(require(tidyverse)))
suppressWarnings(suppressPackageStartupMessages(require(lme4)))
suppressWarnings(suppressPackageStartupMessages(require(ggplot2)))
suppressWarnings(suppressPackageStartupMessages(require(RColorBrewer)))
suppressWarnings(suppressPackageStartupMessages(require(fitdistrplus)))
suppressWarnings(suppressPackageStartupMessages(require(glmmADMB)))
suppressWarnings(suppressPackageStartupMessages(require(MuMIn)))
suppressWarnings(suppressPackageStartupMessages(require(lubridate)))
suppressWarnings(suppressPackageStartupMessages(require(DHARMa)))
suppressWarnings(suppressPackageStartupMessages(require(glmmTMB)))
suppressWarnings(suppressPackageStartupMessages(require(dplyr)))
suppressWarnings(suppressPackageStartupMessages(require(stringr)))
suppressWarnings(suppressPackageStartupMessages(require(scales)))
suppressWarnings(suppressPackageStartupMessages(require(lmerTest)))
mert = read.csv("Mertensia_final3.csv") # read in Mertensia data
mert$prop.dev.seeds<-(mert$dev.seed/mert$total.seeds) #adding proportion of developed seeds
mert$deviation<-abs(mert$relative.position) #getting deviation from the peak
#creating early/late variables based on relative position
mert$early.late<-factor(NA, levels = c("early","late"))
mert$early.late[mert$relative.position<0]<-"early"
mert$early.late[mert$relative.position>0]<-"late"
mert<-mert[!is.na(mert$early.late),]
#removing NAs
mert<-mert[!is.na(mert$dev.seed),]
mert$prop.dev.seeds[is.na(mert$prop.dev.seeds)] <-0
delph = read.csv("Delphinium_final2.csv") # read in Delphinium data
delph$undev.seed1[is.na(delph$undev.seed1)] <- 0 #converting NA to 0
delph$dev.seed.total<-delph$dev.seed+delph$dev.seed1 #creating developed seeds column
delph$undev.seed.total<-delph$undev.seed+delph$undev.seed1 #creating undeveloped seeds column
delph$prop.dev.seeds<-(delph$dev.seed.total/(delph$dev.seed.total+delph$undev.seed.total)) #adding proportion of developed seeds
delph$deviation<-abs(delph$relative.position) #getting deviation from the peak
#creating early/late variables based on relative position
delph$early.late<-factor(NA, levels = c("early","late"))
delph$early.late[delph$relative.position<0]<-"early"
delph$early.late[delph$relative.position>0]<-"late"
delph<-delph[!is.na(delph$early.late),]
#removing NAs
delph<-delph[!is.na(delph$dev.seed.total),]
delph$prop.dev.seeds[is.na(delph$prop.dev.seeds)] <-0
pot = read.csv("Potentilla_final2.csv") # read in Potentilla data
pot$deviation<-abs(pot$relative.position) #getting deviation from the peak
#creating early/late variables based on relative position
pot$early.late<-factor(NA, levels = c("early","late"))
pot$early.late[pot$relative.position<0]<-"early"
pot$early.late[pot$relative.position>0]<-"late"
#removing NAs
pot<-pot[!is.na(pot$early.late),]
flower.counts=read.csv("./Raw_data/flower_counts.csv") #read in flower count data
mert.flower.counts<-flower.counts[(flower.counts$plant=="Mertensia fusiformis"),] #limit flower counts to Mertensia data
mert.counts.by.site<-aggregate(x=mert.flower.counts$total_flowers,by=list(mert.flower.counts$date,mert.flower.counts$site,mert.flower.counts$plot),FUN="mean") #calculate mean flower counts by week and site
colnames(mert.counts.by.site)<-c("date","site","plot.treat","number.conspecifics")
#changing class to adjust names
mert.counts.by.site$site<-as.character(mert.counts.by.site$site)
mert.counts.by.site$plot.treat<-as.character(mert.counts.by.site$plot.treat)
#fixing names
mert.counts.by.site$site[mert.counts.by.site$site=="Avery Picnic"]<-"AveryPicnic"
mert.counts.by.site$site[mert.counts.by.site$site=="Stupid Falls"]<-"StupidFalls"
mert.counts.by.site$site[mert.counts.by.site$site=="Wash 3C"]<-"WG3C"
mert.counts.by.site <-mert.counts.by.site[!(mert.counts.by.site$plot.treat=="Kaysee"),]
mert.counts.by.site$plot.treat[mert.counts.by.site$plot.treat=="Control"]<-"control"
mert.counts.by.site$plot.treat[mert.counts.by.site$plot.treat=="Manipulated"]<-"manip"
#calculating week numbers in preparation for the merge
mert$week.estimate<-strftime(mert$midpoint, format = "%V")
mert.counts.by.site$week.estimate<-strftime(mert.counts.by.site$date, format = "%V")
mert<-merge(mert,mert.counts.by.site, by.x = c("site","plot.treat","week.estimate"), by.y = c("site","plot.treat","week.estimate")) #merging by site, plot treatment, and week estimate
delph.flower.counts<-flower.counts[(flower.counts$plant=="Delphinium nuttallianum"),] #limit flower counts to Delphinium data
delph.counts.by.site<-aggregate(x=delph.flower.counts$total_flowers,by=list(delph.flower.counts$date,delph.flower.counts$site,delph.flower.counts$plot),FUN="mean") #calculate mean flower counts by week and site
colnames(delph.counts.by.site)<-c("date","site","plot.treat","number.conspecifics")
#changing class to adjust names
delph.counts.by.site$site<-as.character(delph.counts.by.site$site)
delph.counts.by.site$plot.treat<-as.character(delph.counts.by.site$plot.treat)
#fixing names
delph.counts.by.site$site[delph.counts.by.site$site=="Rustlers Gulch"]<-"RustlersGulch"
delph.counts.by.site$site[delph.counts.by.site$site=="Wash 3C"]<-"WG3C"
delph.counts.by.site <-delph.counts.by.site[!(delph.counts.by.site$plot.treat=="Kaysee"),]
delph.counts.by.site$plot.treat[delph.counts.by.site$plot.treat=="Control"]<-"control"
delph.counts.by.site$plot.treat[delph.counts.by.site$plot.treat=="Manipulated"]<-"manip"
#calculating week numbers in preparation for the merge
delph$week.estimate<-strftime(delph$midpoint, format = "%V")
delph.counts.by.site$week.estimate<-strftime(delph.counts.by.site$date, format = "%V")
delph<-merge(delph,delph.counts.by.site, by.x = c("site","plot.treat","week.estimate"), by.y = c("site","plot.treat","week.estimate")) #merging by site, plot treatment, and week estimate
pot.flower.counts<-flower.counts[(flower.counts$plant=="Potentilla pulcherrima"),] #limit flower counts to Potentilla data
pot.counts.by.site<-aggregate(x=pot.flower.counts$total_flowers,by=list(pot.flower.counts$date,pot.flower.counts$site,pot.flower.counts$plot),FUN="mean") #calculate mean flower counts by week and site
colnames(pot.counts.by.site)<-c("date","site","plot.treat","number.conspecifics")
#changing class to adjust names
pot.counts.by.site$site<-as.character(pot.counts.by.site$site)
pot.counts.by.site$plot.treat<-as.character(pot.counts.by.site$plot.treat)
#fixing names
pot.counts.by.site$site[pot.counts.by.site$site=="Rustlers Gulch"]<-"RustlersGulch"
pot.counts.by.site$site[pot.counts.by.site$site=="Wash 3C"]<-"WG3C"
pot.counts.by.site$site[pot.counts.by.site$site=="Bellview Bench"]<-"BellviewBench"
pot.counts.by.site$site[pot.counts.by.site$site=="Avery Picnic"]<-"AveryPicnic"
pot.counts.by.site$site[pot.counts.by.site$site=="Stupid Falls"]<-"StupidFalls"
pot.counts.by.site <-pot.counts.by.site[!(pot.counts.by.site$plot.treat=="Kaysee"),]
pot.counts.by.site$plot.treat[pot.counts.by.site$plot.treat=="Control"]<-"control"
pot.counts.by.site$plot.treat[pot.counts.by.site$plot.treat=="Manipulated"]<-"manip"
#calculating week numbers in preparation for the merge
pot$week.estimate<-strftime(pot$midpoint, format = "%V")
pot.counts.by.site$week.estimate<-strftime(pot.counts.by.site$date, format = "%V")
pot<-merge(pot,pot.counts.by.site, by.x = c("site","plot.treat","week.estimate"), by.y = c("site","plot.treat","week.estimate")) #merging by site, plot treatment, and week estimate
mert.open<-mert[(mert$treat=="open"),] #removed hand pollination treatment
mert.nbinom<-fitdist(mert.open$dev.seed, "nbinom") #fitting Mertensia data to negative binomial distribution using fitdistplus
plot(mert.nbinom) #plotting to see the fit
#mert.glmmtmb<-glmmTMB(dev.seed ~ flowers:(deviation*early.late) + flowers:number.conspecifics/plot.treat  + (1|site), family = "nbinom2", data = mert.open) #putting count data into glmmTMB for DHARMa package
#summary(mert.glmmtmb) #summary of glmmTMB model
#mert.counts.simulation<-simulateResiduals(fittedModel = mert.glmmtmb) #creating simulation for Mertensia mixed effects model with DHARMa package
#plot(mert.counts.simulation) #plotting simulation
#testDispersion(mert.counts.simulation) #checking for overdispersion
#testZeroInflation(mert.counts.simulation) #checking for zero inflation
mert.glmmtmb<-glmmTMB(dev.seed ~ flowers:(deviation*early.late) + flowers:number.conspecifics/plot.treat  + (1|site), ziformula=~1, family = "nbinom2", data = mert.open) #putting count data into glmmTMB for DHARMa package
summary(mert.glmmtmb) #summary of glmmTMB model
mert.counts.simulation<-simulateResiduals(fittedModel = mert.glmmtmb) #creating simulation for Mertensia mixed effects model with DHARMa package
plot(mert.counts.simulation) #plotting simulation
testDispersion(mert.counts.simulation) #checking for overdispersion
testZeroInflation(mert.counts.simulation) #checking for zero inflation
#mert.treat.glmmtmb<-glmmTMB(dev.seed ~ treat/flowers + (1|site/plot.treat), family = "nbinom2", data = mert) #Mertensia model for negative binomial data with glmmTMB package
#summary(mert.treat.glmmtmb) #summary of model output
#mert.counts.treat.simulation<-simulateResiduals(fittedModel = mert.treat.glmmtmb) #creating simulation for Mertensia mixed effects model with DHARMa package
#plot(mert.counts.treat.simulation) #plotting simulation
#testDispersion(mert.counts.treat.simulation) #checking for overdispersion
#testZeroInflation(mert.counts.treat.simulation) #checking for zero inflation
mert.treat.glmmtmb<-glmmTMB(dev.seed ~ treat/flowers + (1|site/plot.treat), ziformula=~1, family = "nbinom2", data = mert) #Mertensia model for negative binomial data with glmmTMB package
summary(mert.treat.glmmtmb) #summary of model output
mert.counts.treat.simulation<-simulateResiduals(fittedModel = mert.treat.glmmtmb) #creating simulation for Mertensia mixed effects model with DHARMa package
plot(mert.counts.treat.simulation) #plotting simulation
testDispersion(mert.counts.treat.simulation) #checking for overdispersion
testZeroInflation(mert.counts.treat.simulation) #checking for zero inflation
ggplot(mert.open, aes(x=mert.open$relative.position, y=mert.open$dev.seed, group=mert.open$plot.treat)) +
labs(y="Total Developed Seeds",x="Days Relative to Population Peak Bloom", title="Effect of Mertensia Blooming Time on Total Developed Seeds") +
geom_point(aes(color=plot.treat),size=3, alpha = 0.8) +
scale_color_brewer(palette="Dark2") + labs(color="Plot Treatment") +
scale_color_manual(labels= c("control","accelerated"), values = c("control"="darkred","manip"="darkorange")) +
geom_smooth()
ggplot(mert.open, aes(x=mert.open$relative.position, y=mert.open$dev.seed, group=mert.open$early.late)) +
labs(y="Total Developed Seeds",x="Days Relative to Population Peak Bloom", title="Effect of Mertensia Blooming Time on Total Developed Seeds") +
theme_classic() +
geom_point(aes(color=early.late),size=3, alpha = 0.8) +
scale_color_brewer(palette="Dark2") + labs(color="Before or After Peak") +
scale_color_manual(labels= c("before peak","after peak"), values = c("early"="darkred","late"="darkorange")) +
geom_smooth(method = "glm", aes(color=early.late))
ggplot(mert.open, aes(x=mert.open$deviation, y=mert.open$dev.seed/mert.open$flowers, group= mert.open$early.late)) +
labs(y="Total Developed Seeds per Flower",x="Days Relative to Population Peak Bloom", title="Effect of Mertensia Deviation from Peak on Total Developed Seeds") +
theme_classic() +
scale_x_continuous(breaks=seq(0,6,1)) +
geom_point(size=3, alpha = 0.8, aes(color=early.late)) +
geom_smooth(method="glm",aes(color=early.late)) +
scale_color_brewer(palette="Dark2") +
labs(color="Before or After Peak") +
scale_color_manual(labels= c("before peak","after peak"), values = c("early"="darkred","late"="darkorange"))
ggplot(mert.open, aes(x=mert.open$number.conspecifics, y=mert.open$dev.seed/mert.open$flowers, group= mert.open$plot.treat)) +
labs(y="Total Developed Seeds per Flower",x="Conspecific Density", title="Effect of Mertensia Conspecific Density on Total Developed Seeds") +
theme_classic() +
geom_point(size=3, alpha = 0.8, aes(color=plot.treat)) +
geom_smooth(method="glm",aes(color=plot.treat)) +
scale_color_brewer(palette="Dark2") +
labs(color="Plot Treatment") +
scale_color_manual(labels= c("control","accelerated snowmelt"), values = c("control"="darkgreen","manip"="blue"))
mert$midpoint2<-format(as.Date(mert$midpoint), format="%m-%d")
ggplot(mert, aes(x=mert$midpoint2, y=mert$dev.seed/mert$flowers, group= mert$treat)) +
labs(y="Total Developed Seeds per Flower",x="Date", title="Effect of Mertensia Blooming Time and Pollinator Activity on Total Developed Seeds") +
theme_classic() +
geom_point(size=3, alpha = 0.8, aes(color=treat)) +
geom_smooth(aes(color=treat)) +
scale_color_brewer(palette="Dark2") +
labs(color="Open or Hand-pollinated") +
scale_color_manual(labels= c("open","open-hand"), values = c("open"="darkred","open-hand"="darkorange")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
annotate("rect",xmin="06-19", xmax="07-03",ymin=0,ymax=Inf,alpha=0.1)
delph.open<-delph[(delph$treat=="open"),] #removed hand pollination treatment
delph.nbinom<-fitdist(delph.open$total.seeds, "nbinom") #fitting negative binomial distribution using fitdistplus package
plot(delph.nbinom) #plotting distribution fit
delph.glmmtmb<-glmmTMB(total.seeds ~ X.flowers:(deviation*early.late) + X.flowers:number.conspecifics/plot.treat + (1|site), family = "nbinom2", data = delph.open) #Delphinium model for negative binomial data with glmmTMB package
#removed treat fixed effect (only open)
summary(delph.glmmtmb) #summary of model output
delph.counts.simulation<-simulateResiduals(fittedModel = delph.glmmtmb) #creating simulation for Delphinium mixed effects model with DHARMa package
plot(delph.counts.simulation) #plotting simulation
testDispersion(delph.counts.simulation) #checking for overdispersion
testZeroInflation(delph.counts.simulation) #checking for zero inflation
#delph.treat.glmmtmb<-glmmTMB(total.seeds ~ treat/X.flowers + (1|site/plot.treat), family = "nbinom2", data = delph) #Mertensia model for negative binomial data with glmmTMB package
#summary(delph.treat.glmmtmb) #summary of model output
#delph.counts.treat.simulation<-simulateResiduals(fittedModel = delph.treat.glmmtmb) #creating simulation for Delphinium mixed effects model with DHARMa package
#plot(delph.counts.treat.simulation) #plotting simulation
#testDispersion(delph.counts.treat.simulation) #checking for overdispersion
#testZeroInflation(delph.counts.treat.simulation) #checking for zero inflation
delph.treat.glmmtmb<-glmmTMB(total.seeds ~ treat/X.flowers + (1|site/plot.treat), ziformula=~1, family = "nbinom2", data = delph) #Mertensia model for negative binomial data with glmmTMB package
summary(delph.treat.glmmtmb) #summary of model output
delph.counts.treat.simulation<-simulateResiduals(fittedModel = delph.treat.glmmtmb) #creating simulation for Delphinium mixed effects model with DHARMa package
plot(delph.counts.treat.simulation) #plotting simulation
testDispersion(delph.counts.treat.simulation) #checking for overdispersion
testZeroInflation(delph.counts.treat.simulation) #checking for zero inflation
ggplot(delph.open, aes(x=delph.open$relative.position, y=delph.open$total.seeds, group=plot.treat)) +
labs(title="Effect of Delphinium Blooming Time on Total Developed Seeds", y="Total Developed Seeds",x="Days Relative to Population Peak Bloom") +
geom_point(aes(color=plot.treat),size=3, alpha = 0.8) +
scale_color_brewer(palette="Dark2") + labs(color="Plot Treatment") +
scale_color_manual(labels= c("control","accelerated"), values = c("control"="darkred","manip"="darkorange")) +
geom_smooth()
ggplot(delph.open, aes(x=delph.open$relative.position, y=delph.open$total.seeds, group=delph.open$early.late)) +
labs(y="Total Developed Seeds",x="Days Relative to Population Peak Bloom", title="Effect of Delphinium Blooming Time on Total Developed Seeds") +
theme_classic() +
geom_point(aes(color=early.late),size=3, alpha = 0.8) +
scale_color_brewer(palette="Dark2") + labs(color="Before or After Peak") +
scale_color_manual(labels= c("before peak","after peak"), values = c("early"="darkred","late"="darkorange")) +
geom_smooth(method = "glm", aes(color=early.late))
ggplot(delph.open, aes(x=delph.open$deviation, y=(delph.open$total.seeds/delph.open$X.flowers), group= delph.open$early.late)) +
labs(y="Total Developed Seeds per Flower",x="Days Relative to Population Peak Bloom", title="Effect of Delphinium Deviation from Peak on Total Developed Seeds") +
theme_classic() +
scale_x_continuous(breaks=seq(0,10,1)) +
geom_point(size=3, alpha = 0.8, aes(color=early.late)) +
geom_smooth(method="glm",aes(color=early.late)) +
scale_color_brewer(palette="Dark2") +
labs(color="Before or After Peak") +
scale_color_manual(labels= c("before peak","after peak"), values = c("early"="darkred","late"="darkorange"))
ggplot(delph.open, aes(x=delph.open$number.conspecifics, y=delph.open$total.seeds/delph.open$X.flowers, group= delph.open$plot.treat)) +
labs(y="Total Developed Seeds per Flower",x="Conspecific Density", title="Effect of Delphinium Conspecific Density on Total Developed Seeds") +
theme_classic() +
geom_point(size=3, alpha = 0.8, aes(color=plot.treat)) +
geom_smooth(method="glm",aes(color=plot.treat)) +
scale_color_brewer(palette="Dark2") +
labs(color="Plot Treatment") +
scale_color_manual(labels= c("control","accelerated snowmelt"), values = c("control"="darkgreen","manip"="blue"))
delph$midpoint2<-format(as.Date(delph$midpoint), format="%m-%d")
ggplot(delph, aes(x=delph$midpoint2, y=delph$total.seeds/delph$X.flowers, group= delph$treat)) +
labs(y="Total Developed Seeds per Flower",x="Date", title="Effect of Delphinium Blooming and Pollinator Activity on Total Developed Seeds") +
theme_classic() +
geom_point(size=3, alpha = 0.8, aes(color=treat)) +
geom_smooth(aes(color=treat)) +
scale_color_brewer(palette="Dark2") +
labs(color="Open or Hand-pollinated") +
scale_color_manual(labels= c("open","open-hand"), values = c("open"="darkred","open-hand"="darkorange")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
annotate("rect",xmin="06-27", xmax="07-18",ymin=0,ymax=Inf,alpha=0.1)
pot.open<-pot[(pot$treat=="open"),] #removed hand pollination treatment
pot.nbinom<-fitdist(pot.open$total.seeds, "nbinom") #fitting negative binomial distribution using fitdistplus package
plot(pot.nbinom) #plotting distribution fit
#pot.glmmtmb<-glmmTMB(total.seeds ~ X.flowers:(deviation * early.late) + X.flowers:number.conspecifics/plot.treat + (1|site), family = "nbinom2", data = pot.open) #Potentilla model for negative binomial data with glmmTMB package
#summary(pot.glmmtmb) #summary of model output
#pot.counts.simulation<-simulateResiduals(fittedModel = pot.glmmtmb) #creating simulation for Potentilla mixed effects model with DHARMa package
#plot(pot.counts.simulation) #plotting simulation
#testDispersion(pot.counts.simulation) #checking for overdispersion
#testZeroInflation(pot.counts.simulation) #checking for zero inflation
pot.glmmtmb<-glmmTMB(total.seeds ~ X.flowers:(deviation * early.late) + X.flowers:number.conspecifics/plot.treat + (1|site), ziformula=~1, family = "nbinom2", data = pot.open) #new Potentilla model for negative binomial data with glmmTMB package
summary(pot.glmmtmb) #summary of model output
pot.counts.simulation<-simulateResiduals(fittedModel = pot.glmmtmb) #creating simulation for Potentilla mixed effects model with DHARMa package
plot(pot.counts.simulation) #plotting simulation
testDispersion(pot.counts.simulation) #checking for overdispersion
testZeroInflation(pot.counts.simulation) #checking for zero inflation
#pot.treat.glmmtmb<-glmmTMB(total.seeds ~ treat/X.flowers + (1|site/plot.treat), family = "nbinom2", data = pot) #Potentilla model for negative binomial data with glmmadmb package
#summary(pot.treat.glmmtmb) #summary of model output
#pot.counts.treat.simulation<-simulateResiduals(fittedModel = pot.treat.glmmtmb) #creating simulation for Potentilla mixed effects model with DHARMa package
#plot(pot.counts.treat.simulation) #plotting simulation
#testDispersion(pot.counts.treat.simulation) #checking for overdispersion
#testZeroInflation(pot.counts.treat.simulation) #checking for zero inflation
pot.treat.glmmtmb<-glmmTMB(total.seeds ~ treat/X.flowers + (1|site/plot.treat), ziformula=~1, family="nbinom2",data = pot) #Potentilla model for negative binomial data with glmmadmb package
summary(pot.treat.glmmtmb) #summary of model output
pot.counts.treat.simulation<-simulateResiduals(fittedModel = pot.treat.glmmtmb) #creating simulation for Potentilla mixed effects model with DHARMa package
plot(pot.counts.treat.simulation) #plotting simulation
testDispersion(pot.counts.treat.simulation) #checking for overdispersion
testZeroInflation(pot.counts.treat.simulation) #checking for zero inflation
ggplot(pot.open, aes(x=pot.open$relative.position, y=pot.open$total.seeds, group=plot.treat)) +
labs(title="Effect of Potentilla Blooming Time on Total Developed Seeds", y="Total Developed Seeds",x="Days Relative to Population Peak Bloom") +
geom_point(aes(color=plot.treat),size=3, alpha = 0.8) +
scale_color_brewer(palette="Dark2") + labs(color="Plot Treatment") +
scale_color_manual(labels= c("control","accelerated"), values = c("control"="darkred","manip"="darkorange")) +
geom_smooth()
ggplot(pot.open, aes(x=pot.open$relative.position, y=pot.open$total.seeds, group=pot.open$early.late)) +
labs(y="Total Developed Seeds",x="Days Relative to Population Peak Bloom", title="Effect of Potentilla Blooming Time on Total Developed Seeds") +
theme_classic() +
geom_point(aes(color=early.late),size=3, alpha = 0.8) +
scale_color_brewer(palette="Dark2") + labs(color="Before or After Peak") +
scale_color_manual(labels= c("before peak","after peak"), values = c("early"="darkred","late"="darkorange")) +
geom_smooth(method = "glm", aes(color=early.late))
ggplot(pot.open, aes(x=pot.open$deviation, y=pot.open$total.seeds/pot.open$X.flowers, group= pot.open$early.late)) +
labs(y="Total Developed Seeds per Flower",x="Days Relative to Population Peak Bloom",title="Effect of Potentilla Deviation from Peak on Total Developed Seeds") +
theme_classic() +
scale_x_continuous(breaks=seq(0,24,2)) +
geom_point(size=3, alpha = 0.8, aes(color=early.late)) +
geom_smooth(method="glm",aes(color=early.late)) +
scale_color_brewer(palette="Dark2") +
labs(color="Before or After Peak") +
scale_color_manual(labels= c("before peak","after peak"), values = c("early"="darkred","late"="darkorange"))
ggplot(pot.open, aes(x=pot.open$number.conspecifics, y=pot.open$total.seeds/pot.open$X.flowers, group= pot.open$plot.treat)) +
labs(y="Total Developed Seeds per Flower",x="Conspecific Density", title="Effect of Potentilla Conspecific Density on Total Developed Seeds") +
theme_classic() +
geom_point(size=3, alpha = 0.8, aes(color=plot.treat)) +
geom_smooth(method="glm",aes(color=plot.treat)) +
scale_color_brewer(palette="Dark2") +
labs(color="Plot Treatment") +
scale_color_manual(labels= c("control","accelerated snowmelt"), values = c("control"="darkgreen","manip"="blue"))
ggplot(pot,aes(x=as.Date.factor(pot$midpoint), y=pot$total.seeds/pot$X.flowers, group= pot$treat)) +
labs(y="Total Developed Seeds per Flower",x="Date", title="Pollinator Activity Period and Total Developed Seeds in Potentilla") +
theme_classic() +
geom_point(size=3, alpha = 0.8, aes(color=treat)) +
geom_smooth(aes(color=treat)) +
scale_color_brewer(palette="Dark2") +
labs(color="Open or Hand-pollinated") +
scale_color_manual(labels= c("open","open-hand"), values = c("open"="darkred","open-hand"="darkorange")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
annotate("rect",xmin=as.Date.character("2019-07-05"), xmax=as.Date.character("2019-08-24"),ymin=0,ymax=Inf,alpha=0.1) +
scale_x_date(date_breaks = "3 days", date_labels = "%m/%d")
mert.binom<-fitdist(mert.open$prop.dev.seeds, "norm",start = NULL) #fitting Mertensia data to binomial distribution with normal errors using fitdistplus
plot(mert.binom) #plotting to see the fit
mert.open$undev.seeds<-(mert.open$total.seeds-mert.open$dev.seed) #creating an undeveloped seed column for cbind
mert$undev.seeds<-(mert$total.seeds-mert$dev.seed) #creating an undeveloped seed column for cbind
Mert.prop.glmmtmb<-glmmTMB(cbind(dev.seed,undev.seeds) ~ flowers:(deviation * early.late) + flowers:number.conspecifics/plot.treat + (1|site), family = binomial, data = mert.open) #Mertensia model with proportion of developed seeds using the glmmTMB package
summary(Mert.prop.glmmtmb)
mert.prop.simulation<-simulateResiduals(fittedModel = Mert.prop.glmmtmb) #creating simulation for Mertensia mixed effects model with DHARMa package
plot(mert.prop.simulation) #plotting simulation
testDispersion(mert.prop.simulation) #checking for overdispersion
testZeroInflation(mert.prop.simulation)
Mert.prop.treat.glmmtmb<-glmmTMB(cbind(dev.seed,undev.seeds) ~ treat/flowers + (1|site/plot.treat), family = binomial, data = mert) #model with pollen lim treatment and proportion of developed seeds using the glmmTMB package
summary(Mert.prop.treat.glmmtmb) #summary of model results
mert.prop.treat.simulation<-simulateResiduals(fittedModel = Mert.prop.treat.glmmtmb) #creating simulation for Mertensia mixed effects model with DHARMa package
plot(mert.prop.treat.simulation) #plotting simulation
testDispersion(mert.prop.treat.simulation) #checking for overdispersion
testZeroInflation(mert.prop.treat.simulation) #checking for zero inflation
mert.open<-mert.open[!is.na(mert.open$prop.dev.seeds),] #removing NA values from proportion column
ggplot(mert.open, aes(x=mert.open$relative.position, y=mert.open$prop.dev.seeds, group=plot.treat)) +
labs(y="Proportion of Developed Seeds",x="Days Relative to Population Peak Bloom",title="Effect of Mertensia Blooming Time on Proportion of Developed Seeds") +
geom_point(aes(color=plot.treat),size=3, alpha = 0.8) +
scale_color_brewer(palette="Dark2") + labs(color="Plot Treatment") +
scale_color_manual(labels= c("control","accelerated"), values = c("control"="darkred","manip"="darkorange")) +
geom_smooth()
ggplot(mert.open, aes(x=mert.open$deviation, y=mert.open$prop.dev.seeds/mert.open$flowers, group= mert.open$early.late)) +
labs(y="Proportion of Developed Seeds per Flower",x="Days Relative to Population Peak Bloom",title="Effect of Mertensia Deviation from Peak on Proportion of Developed Seeds") +
theme_classic() +
scale_x_continuous(breaks=seq(0,6,1)) +
geom_point(size=3, alpha = 0.8, aes(color=early.late)) +
geom_smooth(method="glm",aes(color=early.late)) +
scale_color_brewer(palette="Dark2") +
labs(color="Before or After Peak") +
scale_color_manual(labels= c("before peak","after peak"), values = c("early"="darkred","late"="darkorange"))
ggplot(mert.open, aes(x=mert.open$number.conspecifics, y=mert.open$prop.dev.seeds/mert.open$flowers, group= mert.open$plot.treat)) +
labs(y="Proportion of Developed Seeds per Flower",x="Conspecific Density",title="Effect of Mertensia Conspecific Density on Proportion of Developed Seeds") +
theme_classic() +
geom_point(size=3, alpha = 0.8, aes(color=plot.treat)) +
geom_smooth(method="glm",aes(color=plot.treat)) +
scale_color_brewer(palette="Dark2") +
labs(color="Plot Treatment") +
scale_color_manual(labels= c("control","accelerated snowmelt"), values = c("control"="darkgreen","manip"="blue"))
ggplot(mert, aes(x=as.Date.factor(mert$midpoint), y=mert$prop.dev.seeds/mert$flowers, group= mert$treat)) +
labs(y="Proportion of Developed Seeds per Flower",x="Date", title="Pollinator Activity Period and Proportion of Developed Seeds in Mertensia") +
theme_classic() +
geom_point(size=3, alpha = 0.8, aes(color=treat)) +
geom_smooth(aes(color=treat)) +
scale_color_brewer(palette="Dark2") +
labs(color="Open or Hand-pollinated") +
scale_color_manual(labels= c("open","open-hand"), values = c("open"="darkred","open-hand"="darkorange")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
annotate("rect",xmin=as.Date.character("2019-06-19"), xmax=as.Date.character("2019-07-03"),ymin=0,ymax=Inf,alpha=0.1) +
scale_x_date(date_breaks = "3 days", date_labels = "%m/%d")
delph.binom<-fitdist(delph.open$prop.dev.seeds, "norm") #fitting delphinium data to binomial distribution with normal errors using fitdistplus
plot(delph.binom) #plotting to see the fit
Delph.prop.glmmtmb<-glmmTMB(cbind(dev.seed.total,undev.seed.total) ~ X.flowers:(deviation * early.late) + X.flowers:number.conspecifics/plot.treat + (1|site), family = betabinomial, data = delph.open) #modeling Delphinium proportion of developed seeds with glmmTMB package
summary(Delph.prop.glmmtmb)
delph.prop.simulation<-simulateResiduals(fittedModel = Delph.prop.glmmtmb) #creating simulation for Delphinium model
plot(delph.prop.simulation) #plotting simulation
testDispersion(delph.prop.simulation) #checking for overdispersion
testZeroInflation(delph.prop.simulation) #checking for zero inflation
Delph.prop.treat.glmmtmb<-glmmTMB(cbind(dev.seed.total,undev.seed.total) ~ treat/X.flowers + (1|site/plot.treat), family = betabinomial, data = delph) #modeling pollen lim and proportion of developed seeds with glmmTMB package
summary(Delph.prop.treat.glmmtmb) #model summary
delph.prop.treat.simulation<-simulateResiduals(fittedModel = Delph.prop.treat.glmmtmb) #creating simulation for Delphinium model
plot(delph.prop.treat.simulation) #plotting simulation
testDispersion(delph.prop.treat.simulation) #checking for overdispersion
testZeroInflation(delph.prop.treat.simulation) #checking for zero inflation
delph.open<-delph.open[!is.na(delph.open$prop.dev.seeds),] #removing NA values in proportion column
ggplot(delph.open, aes(x=delph.open$relative.position, y=delph.open$prop.dev.seeds, group=plot.treat)) +
labs(title="Effect of Delphinium Blooming Time on Proportion of Developed Seeds", y="Proportion of Developed Seeds",x="Days Relative to Population Peak Bloom") +
geom_point(aes(color=plot.treat),size=3, alpha = 0.8) +
scale_color_brewer(palette="Dark2") + labs(color="Plot Treatment") +
scale_color_manual(labels= c("control","accelerated"), values = c("control"="darkred","manip"="darkorange")) +
geom_smooth()
ggplot(delph.open, aes(x=delph.open$deviation, y=(delph.open$prop.dev.seeds/delph.open$X.flowers), group= delph.open$early.late)) +
labs(y="Proportion of Developed Seeds per Flower",x="Days Relative to Population Peak Bloom",title="Effect of Delphinium Deviation from Peak on Proportion of Developed Seeds") +
theme_classic() +
scale_x_continuous(breaks=seq(0,10,1)) +
geom_point(size=3, alpha = 0.8, aes(color=early.late)) +
geom_smooth(method="glm",aes(color=early.late)) +
scale_color_brewer(palette="Dark2") +
labs(color="Before or After Peak") +
scale_color_manual(labels= c("before peak","after peak"), values = c("early"="darkred","late"="darkorange"))
ggplot(delph.open, aes(x=delph.open$number.conspecifics, y=delph.open$prop.dev.seeds/delph.open$X.flowers, group= delph.open$plot.treat)) +
labs(y="Proportion of Developed Seeds per Flower",x="Conspecific Density",title="Effect of Delphinium Conspecific Density on Proportion of Developed Seeds") +
theme_classic() +
geom_point(size=3, alpha = 0.8, aes(color=plot.treat)) +
geom_smooth(method="glm",aes(color=plot.treat)) +
scale_color_brewer(palette="Dark2") +
labs(color="Plot Treatment") +
scale_color_manual(labels= c("control","accelerated snowmelt"), values = c("control"="darkgreen","manip"="blue")) + xlim(0,110)
ggplot(delph, aes(x=as.Date.factor(delph$midpoint), y=delph$prop.dev.seeds/delph$X.flowers, group= delph$treat)) +
labs(y="Proportion of Developed Seeds per Flower",x="Date", title="Pollinator Activity Period and Proportion of Developed Seeds in Delphinium") +
theme_classic() +
geom_point(size=3, alpha = 0.8, aes(color=treat)) +
geom_smooth(aes(color=treat)) +
scale_color_brewer(palette="Dark2") +
labs(color="Open or Hand-pollinated") +
scale_color_manual(labels= c("open","open-hand"), values = c("open"="darkred","open-hand"="darkorange")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
annotate("rect",xmin=as.Date.character("2019-06-27"), xmax=as.Date.character("2019-07-18"),ymin=0,ymax=Inf,alpha=0.1) +
scale_x_date(date_breaks = "3 days", date_labels = "%m/%d")
#Mertensia plots with total developed seeds per flower and proportion of developed seeds per flower
ggplot(mert, aes(x=treat, y=dev.seed/flowers)) +
labs(y="Total developed seeds", x="Pollen limitation treatment", title="Effect of pollen supplementation on Mertensia total developed seeds") +
theme_classic() +
geom_col()
ggplot(mert, aes(x=treat, y=prop.dev.seeds/flowers)) +
labs(y="Proportion developed seeds", x="Pollen limitation treatment",title="Effect of pollen supplementation on Mertensia proportion of developed seeds") +
theme_classic() +
geom_col()
#Delphinium plots with total developed seeds per flower and proportion of developed seeds per flower
ggplot(delph, aes(x=treat, y=total.seeds/X.flowers)) +
labs(y="Total developed seeds", x="Pollen limitation treatment",title="Effect of pollen supplementation on Delphinium total developed seeds") +
theme_classic() +
geom_col()
ggplot(delph, aes(x=treat, y=prop.dev.seeds/X.flowers)) +
labs(y="Proportion developed seeds", x="Pollen limitation treatment",title="Effect of pollen supplementation on Delphinium proportion of developed seeds") +
theme_classic() +
geom_col()
#Potentilla plots with total developed seeds per flower
ggplot(pot, aes(x=treat, y=total.seeds/X.flowers)) +
labs(y="Total developed seeds", x="Pollen limitation treatment",title="Effect of pollen supplementation on Potentilla total developed seeds") +
theme_classic() +
geom_col()
#number of Mertensia flowers in each plot treatment
ggplot(mert, aes(x=plot.treat, y=flowers)) +
labs(y="Number of flowers", x="Plot treatment",title="Effect of plot treatment on Mertensia flower number") +
theme_classic() +
geom_col()
#number of Delphinium flowers in each plot treatment
ggplot(delph,aes(x=plot.treat, y=X.flowers)) +
labs(y="Number of flowers", x="Plot treatment",title="Effect of plot treatment on Delphinium flower number") +
theme_classic() +
geom_col()
#number of Potentilla flowers in each plot treatment
ggplot(pot,aes(x=plot.treat, y=X.flowers)) +
labs(y="Number of flowers", x="Plot treatment",title="Effect of plot treatment on Potentilla flower number") +
theme_classic() +
geom_col()
sessionInfo()
View(delph.glmmtmb)
